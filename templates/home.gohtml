{{define "page"}}
<!-- Header -->
<header class="py-10">
    <div class="container mx-auto">
        <h1 class="text-3xl font-semibold leading-tight font-serif mb-6">GopherDork results</h1>
        <p class="text-md text-base leading-relaxed font-serif font-normal">This tab displays the results of all google dorks Configured.</p>
    </div>
</header>

<!-- Table -->
<div class="container mx-auto my-10">
    <div class="flex flex-col">
        <div class="-my-2 sm:-mx-6 lg:-mx-8">
            <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                <div class="shadow p-1 border border-gray-400 sm:rounded-lg">
                    <div class="max-w-screen-xl mx-auto">
                        <table class="min-w-full divide-y divide-gray-400">
                            <thead class="bg-gray-600">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">#</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Config</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">URL</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Description</th>
                                    <th scope="col" class="px-9 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">Action</th>
                                </tr>
                            </thead>
                            <tbody class="bg-gray-500 divide-y divide-gray-400">
                                {{range $index, $element := .}}
                                <tr _status="{{if $element.Status}}{{$element.Status}}{{end}}" class="tr">
                                    <td class="td px-6 py-4 font-normal text-sm text-white">
                                        {{$index | add1}}
                                    </td>
                                    <td class="td px-6 py-4 font-normal text-sm text-white break-all">
                                        {{if $element.ConfigName}}{{$element.ConfigName}}{{end}}
                                    </td>
                                    <td class="td px-6 py-4 font-normal text-sm text-white break-all">
                                        {{if $element.Url}}
                                        <a class="hover:text-gray-400 break-all" href="{{$element.Url}}" target="_blank" rel="noopener noreferrer">
                                            {{$element.Url}}
                                        </a>
                                        {{end}}
                                    </td>
                                    <td class="td px-6 py-4 font-normal text-sm text-white break-all">
                                        {{if $element.Description}}{{$element.Description}}{{end}}
                                    </td>
                                    <td class="px-6 py-4 font-semibold text-sm text-white text-right">
                                        <div class="relative inline-block text-left">
                                            <button class="dropdown-button rounded-md px-4 py-2 bg-gray-600 text-white font-semibold hover:bg-gray-700 focus:outline-none">
                                                Action
                                            </button>
                                            <div class="dropdown-menu hidden rounded-md absolute z-50 mt-2 py-2 w-32 bg-gray-400 border border-gray-600 shadow-lg">
                                                <div style="cursor: pointer" _id="{{$element.Id}}" _newStatus="1" class="editBtn block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">In progress</div>
                                                <div style="cursor: pointer" _id="{{$element.Id}}" _newStatus="2" class="editBtn block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Completed</div>
                                                <div style="cursor: pointer" _id="{{$element.Id}}" _newStatus="3" class="editBtn block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Delete</div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>  
</div>

<script>
    const dropdownButtons = document.querySelectorAll('.dropdown-button');
    const editBtns = document.querySelectorAll('.editBtn');
    const rows = document.querySelectorAll('.tr');

    rows.forEach(row => {
        changeColor(row, row.getAttribute("_status"));
    });

    dropdownButtons.forEach(btn => {
        btn.addEventListener('click', function handleClick(event) {
            event.srcElement.nextElementSibling.classList.toggle('hidden');
        });
    });

    document.addEventListener('click', (event) => {
        dropdownButtons.forEach(btn => {
            if (!btn.contains(event.target)) {
                btn.nextElementSibling.classList.add('hidden');
            }
        });
    });

    editBtns.forEach(btn => {
        btn.addEventListener('click', function handleClick(event) {
            const id = btn.getAttribute("_id");
            const status = btn.getAttribute("_newStatus");
            const parent = btn.closest(".tr");
            var path = "";
            if (parent.getAttribute("_status") === status) {
                path = document.location.origin + "/edit/" + id + "/0";
            } else {
                path = document.location.origin + "/edit/" + id + "/" + status;
            }
            if (status === "3") {
                const msgBtn = document.getElementById("msg-popup");
                msgBtn.classList.remove("hidden");
                waitForConfirmation().then((userChoice) => {
                    msgBtn.classList.add("hidden");
                    if (userChoice == "No") {
                        return;
                    } else if (userChoice == "Yes") {
                        changeStatus(path, function(newStatus){
                            if (newStatus === "3") { parent.remove() };
                        });
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            } else {
                changeStatus(path, function(newStatus){
                    changeColor(parent, newStatus);
                    parent.setAttribute("_status", newStatus);
                });
            }
        });
    });

    function changeColor(el, st) {
        if (st == 0) {
            el.classList = "tr";
            el.querySelectorAll(".td").forEach(elm => {
                elm.classList = "td px-6 py-4 whitespace-normal font-normal text-sm text-white"
            });
        } else if (st == 1) {
            el.classList = "tr bg-amber-300";
            el.querySelectorAll(".td").forEach(elm => {
                elm.classList = "td px-6 py-4 whitespace-normal font-normal text-sm text-black"
            });
        } else if (st == 2) {
            el.classList = "tr bg-emerald-300";
            el.querySelectorAll(".td").forEach(elm => {
                elm.classList = "td px-6 py-4 whitespace-normal font-normal text-sm text-black"
            });
        }
    };

    function waitForConfirmation() {
        return new Promise((resolve, reject) => {
            const yesButton = document.querySelector('#yes-button');
            const noButton = document.querySelector('#no-button');
            yesButton.addEventListener('click', () => {
                resolve('Yes');
            });
            noButton.addEventListener('click', () => {
                resolve('No');
            });
        });
    }

    function changeStatus(path, callback) {
        const xhr = new XMLHttpRequest();
        xhr.open("GET", path);
        xhr.send();
        xhr.onload = function() {
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                const newStatus = xhr.responseText;
                callback(newStatus);
            }
        }
    }

</script>
{{end}}